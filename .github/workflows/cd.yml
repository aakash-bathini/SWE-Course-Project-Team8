name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-backend:
    name: Package backend (Lambda)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
      - name: Build Lambda package
        run: |
          mkdir -p lambda_package
          cp app.py lambda_package/
          cp -r src lambda_package/
          cd lambda_package
          zip -r ../deployment.zip .
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-deployment-zip
          path: deployment.zip

  build-frontend:
    name: Build frontend (React)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install
        working-directory: frontend
        run: npm install --legacy-peer-deps
      - name: Build
        working-directory: frontend
        run: npm run build
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

  deploy:
    name: Deploy (auto on main; no-op unless AWS configured)
    runs-on: ubuntu-latest
    needs: [ build-backend, build-frontend ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: backend-deployment-zip
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend-build

      - name: Configure AWS credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_REGION != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: No-op deploy when AWS not configured
        if: ${{ !(secrets.AWS_ROLE_ARN != '' && secrets.AWS_REGION != '') }}
        run: |
          echo "AWS credentials not configured. Skipping deploy (this job succeeds as a no-op)."
          echo "Artifacts available: deployment.zip and frontend-build/."

      - name: Deploy backend (placeholder)
        if: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_REGION != '' }}
        run: |
          echo "Update Lambda code with deployment.zip here (placeholder)."
          echo "Example: aws lambda update-function-code --function-name $LAMBDA_FN --zip-file fileb://deployment.zip"

      - name: Deploy frontend (placeholder)
        if: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_REGION != '' }}
        run: |
          echo "Sync build to S3 here (placeholder)."
          echo "Example: aws s3 sync ./frontend-build s3://$S3_BUCKET --delete"

name: CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy environment"
        required: true
        default: "production"
  push:
    branches: [ main ]
    paths:
      - '**'

jobs:
  deploy:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Package backend for Lambda
        run: |
          mkdir -p lambda_package
          cp app.py -t lambda_package/
          cp -r src lambda_package/
          cd lambda_package
          zip -r ../deployment.zip .
          cd ..

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Placeholder: Deploy to AWS (manual wiring required)
        run: |
          echo "Ready to deploy: deployment.zip (Lambda) and frontend/build (S3)."
          echo "Use AWS OIDC or AWS creds to upload and update resources."
          echo "This step intentionally does not perform networked deploys yet."
