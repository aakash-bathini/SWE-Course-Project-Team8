name: Phase 2 CI/CD Pipeline

on:
  pull_request:            # run on PRs only
  push:
    branches: ["main"]     # run on pushes to main
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend Testing
  backend-lint:
    name: Backend Lint (black + flake8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install black flake8
          fi

      - name: Black (check)
        run: black --check .

      - name: Flake8
        run: flake8 .

  backend-typecheck:
    name: Backend Typecheck (mypy)
    runs-on: ubuntu-latest
    needs: backend-lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install fastapi pydantic uvicorn mangum
          pip install mypy typing-extensions

      - name: Install dev deps
        run: |
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install mypy
          fi

      - name: MyPy
        run: mypy .

  backend-test:
    name: Backend Test (pytest + coverage)
    runs-on: ubuntu-latest
    needs: [backend-lint, backend-typecheck]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install pytest pytest-cov
          fi

      - name: Show Python & pip (debug)
        run: |
          python --version
          pip --version

      - name: Pytest (coverage XML + JUnit)
        run: |
          mkdir -p test-results
          pytest --cov=src --cov-report=xml --junit-xml=test-results/junit.xml

      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Upload JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: test-results/junit.xml

  # Frontend Testing
  frontend-test:
    name: Frontend Test (React + TypeScript)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      - name: Run TypeScript type check
        run: |
          cd frontend
          npm run type-check

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --passWithNoTests

  # FastAPI Server Test
  api-test:
    name: FastAPI Server Test
    runs-on: ubuntu-latest
    needs: [backend-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start FastAPI server
        run: |
          python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          
          # Test root endpoint
          curl -f http://localhost:8000/ || exit 1
          
          # Test OpenAPI docs
          curl -f http://localhost:8000/docs || exit 1

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # AWS Deployment (only on main branch)
  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, api-test, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install AWS CLI
        run: |
          pip install awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create deployment package
        run: |
          zip -r deployment.zip . -x "*.git*" "frontend/*" "test-results/*" "*.log"

      - name: Deploy to AWS Lambda
        run: |
          # This will be implemented in Milestone 2
          echo "AWS deployment will be implemented in Milestone 2"
          # aws lambda update-function-code --function-name trustworthy-model-registry --zip-file fileb://deployment.zip

  # Code Quality Gate
  quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, api-test, security-scan]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
          path: coverage/

      - name: Check coverage threshold
        run: |
          # Check if coverage meets 60% threshold
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage/coverage.xml')
          root = tree.getroot()
          line_rate = float(root.get('line-rate', 0))
          print(f'Coverage: {line_rate:.2%}')
          if line_rate < 0.6:
              print('ERROR: Coverage below 60% threshold')
              exit(1)
          else:
              print('SUCCESS: Coverage meets threshold')
          "

      - name: Quality Gate Passed
        run: |
          echo "✅ All quality gates passed!"
          echo "✅ Backend tests: PASSED"
          echo "✅ Frontend tests: PASSED" 
          echo "✅ API tests: PASSED"
          echo "✅ Security scan: PASSED"
          echo "✅ Coverage threshold: MET"
